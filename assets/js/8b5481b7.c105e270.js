"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[5727],{3208:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>d,toc:()=>a});var o=t(5893),s=t(1151);const r={},i="org.osbuild.ostree.deploy",d={id:"developer-guide/projects/osbuild/modules/stages/org.osbuild.ostree.deploy",title:"org.osbuild.ostree.deploy",description:"Deploy an OStree commit",source:"@site/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.ostree.deploy.md",sourceDirName:"developer-guide/02-projects/osbuild/modules/stages",slug:"/developer-guide/projects/osbuild/modules/stages/org.osbuild.ostree.deploy",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.ostree.deploy",draft:!1,unlisted:!1,editUrl:"https://github.com/osbuild/saurus/tree/main/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.ostree.deploy.md",tags:[],version:"current",frontMatter:{},sidebar:"developer",previous:{title:"org.osbuild.ostree.deploy.container",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.ostree.deploy.container"},next:{title:"org.osbuild.ostree.encapsulate",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.ostree.encapsulate"}},l={},a=[{value:"Schema 1",id:"schema-1",level:2},{value:"Schema 2",id:"schema-2",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"orgosbuildostreedeploy",children:"org.osbuild.ostree.deploy"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Deploy an OStree commit"})}),"\n",(0,o.jsxs)(n.p,{children:["Create an OSTree deployment[1] for a given ref.\nSince OStree internally uses a hardlink farm to create the file system tree\nfor the deployment from the commit data, the mountpoints for the final image\nneed to be supplied via the ",(0,o.jsx)(n.code,{children:"mounts"})," option, as hardlinks must not span\nacross file systems and therefore the boundaries need to be known when doing\nthe deployment.\nCreating a deployment also entails generating the Boot Loader Specification\nentries to boot the system, which contain this the kernel command line.\nThe ",(0,o.jsx)(n.code,{children:"rootfs"})," option can be used to indicate the root file system, containing\nthe sysroot and the deployments. Additional kernel options can be passed via\n",(0,o.jsx)(n.code,{children:"kernel_opts"}),".\n[1] ",(0,o.jsx)(n.a,{href:"https://ostree.readthedocs.io/en/latest/manual/deployment/",children:"https://ostree.readthedocs.io/en/latest/manual/deployment/"})]}),"\n",(0,o.jsx)(n.h2,{id:"schema-1",children:"Schema 1"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:"{}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"schema-2",children:"Schema 2"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "options": {\n    "additionalProperties": false,\n    "required": [\n      "osname"\n    ],\n    "properties": {\n      "mounts": {\n        "description": "Mount points of the final file system",\n        "type": "array",\n        "items": {\n          "description": "Description of one mount point",\n          "type": "string"\n        }\n      },\n      "osname": {\n        "description": "Name of the stateroot to be used in the deployment",\n        "type": "string"\n      },\n      "kernel_opts": {\n        "description": "Additional kernel command line options",\n        "type": "array",\n        "items": {\n          "description": "A single kernel command line option",\n          "type": "string"\n        }\n      },\n      "ref": {\n        "description": "OStree ref to use for the deployment",\n        "type": "string"\n      },\n      "remote": {\n        "description": "optional OStree remote to use for the deployment",\n        "type": "string"\n      },\n      "rootfs": {\n        "description": "Identifier to locate the root file system",\n        "type": "object",\n        "oneOf": [\n          {\n            "required": [\n              "uuid"\n            ]\n          },\n          {\n            "required": [\n              "label"\n            ]\n          }\n        ],\n        "properties": {\n          "label": {\n            "description": "Identify the root file system by label",\n            "type": "string"\n          },\n          "uuid": {\n            "description": "Identify the root file system by UUID",\n            "type": "string"\n          }\n        }\n      }\n    }\n  },\n  "inputs": {\n    "type": "object",\n    "additionalProperties": false,\n    "required": [\n      "commits"\n    ],\n    "properties": {\n      "commits": {\n        "type": "object",\n        "description": "OStree commit to deploy",\n        "additionalProperties": true\n      }\n    }\n  }\n}\n'})})]})}function c(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>i});var o=t(7294);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);