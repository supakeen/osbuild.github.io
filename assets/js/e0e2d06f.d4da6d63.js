"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[9059],{661:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>a});var n=s(5893),t=s(1151);const o={},r="org.osbuild.machine-id",d={id:"developer-guide/projects/osbuild/modules/stages/org.osbuild.machine-id",title:"org.osbuild.machine-id",description:"Deal with /etc/machine-id",source:"@site/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.machine-id.md",sourceDirName:"developer-guide/02-projects/osbuild/modules/stages",slug:"/developer-guide/projects/osbuild/modules/stages/org.osbuild.machine-id",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.machine-id",draft:!1,unlisted:!1,editUrl:"https://github.com/osbuild/saurus/tree/main/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.machine-id.md",tags:[],version:"current",frontMatter:{},sidebar:"developer",previous:{title:"org.osbuild.lvm2.metadata",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.lvm2.metadata"},next:{title:"org.osbuild.mkdir",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.mkdir"}},l={},a=[{value:"Schema 1",id:"schema-1",level:2},{value:"Schema 2",id:"schema-2",level:2}];function c(e){const i={code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"orgosbuildmachine-id",children:"org.osbuild.machine-id"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.strong,{children:"Deal with /etc/machine-id"})}),"\n",(0,n.jsx)(i.p,{children:"Explicitly define the state to /etc/machine-id. The possible values for\nfirst-boot are:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:'yes: This sets the machine-id to "uninitialized" and this will trigger\nContidionFirstBoot in systemd'}),"\n",(0,n.jsxs)(i.li,{children:["no: This creates an empty machine-id. It will trigger the generation\nof a new machine-id but ",(0,n.jsx)(i.em,{children:"not"})," the ConditionFirstBoot"]}),"\n",(0,n.jsx)(i.li,{children:"preserve: Leave the existing machine-id in place. Not having a machine-id\nwith that set is an error."}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"schema-1",children:"Schema 1"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-json",children:'{\n  "additionalProperties": false,\n  "required": [\n    "first-boot"\n  ],\n  "properties": {\n    "first-boot": {\n      "enum": [\n        "yes",\n        "no",\n        "preserve"\n      ],\n      "description": "Set the first boot behavior of the /etc/machine-id file in the tree"\n    }\n  }\n}\n'})}),"\n",(0,n.jsx)(i.h2,{id:"schema-2",children:"Schema 2"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-json",children:"{}\n"})})]})}function u(e={}){const{wrapper:i}={...(0,t.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1151:(e,i,s)=>{s.d(i,{Z:()=>d,a:()=>r});var n=s(7294);const t={},o=n.createContext(t);function r(e){const i=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),n.createElement(o.Provider,{value:i},e.children)}}}]);