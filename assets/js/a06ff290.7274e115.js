"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[3967],{1200:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>a});var t=n(5893),i=n(1151);const o={},r="org.osbuild.systemd",d={id:"developer-guide/projects/osbuild/modules/stages/org.osbuild.systemd",title:"org.osbuild.systemd",description:"Configure Systemd services.",source:"@site/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.systemd.md",sourceDirName:"developer-guide/02-projects/osbuild/modules/stages",slug:"/developer-guide/projects/osbuild/modules/stages/org.osbuild.systemd",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.systemd",draft:!1,unlisted:!1,editUrl:"https://github.com/osbuild/saurus/tree/main/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.systemd.md",tags:[],version:"current",frontMatter:{},sidebar:"developer",previous:{title:"org.osbuild.systemd-logind",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.systemd-logind"},next:{title:"org.osbuild.systemd.preset",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.systemd.preset"}},l={},a=[{value:"Schema 1",id:"schema-1",level:2},{value:"Schema 2",id:"schema-2",level:2}];function c(e){const s={code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"orgosbuildsystemd",children:"org.osbuild.systemd"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Configure Systemd services."})}),"\n",(0,t.jsxs)(s.p,{children:["Enable, disable or mask systemd units (service, socket, path, etc.) by running\n",(0,t.jsx)(s.code,{children:"systemctl"})," from the buildhost.\nThis stage runs ",(0,t.jsx)(s.code,{children:"systemctl enable"})," for all ",(0,t.jsx)(s.code,{children:"enabled_services"})," items, which may\ncreate symlinks under ",(0,t.jsx)(s.code,{children:"/etc/systemd/system"}),".\nAfter enabling units, it runs ",(0,t.jsx)(s.code,{children:"systemctl disable"})," for all ",(0,t.jsx)(s.code,{children:"disabled_services"}),"\nitems, which will delete ",(0,t.jsx)(s.em,{children:"all"})," symlinks to the named services.\nThe 'default_target' option allows to configure the default Systemd target.\nThe 'unit_dropins' option allows to create Systemd unit drop-in configuration\nfiles in ",(0,t.jsx)(s.code,{children:"/usr/lib/systemd/system/\\<unit_name\\>.d/"}),". Its properties are names of\n'.service' files to be modified using drop-ins. These names are validated using\nthe same rules as specified by systemd.unit(5) and they must contain the\n'.service' suffix (other types of unit files are not supported). Value of each\nspecified '.service' file is an object, which properties are names of drop-in\nconfiguration '.conf' files. Drop-in configuration files can currently specify\nthe following subset of options:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["'Service' section","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"'Environment' option"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"schema-1",children:"Schema 1"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n  "additionalProperties": false,\n  "properties": {\n    "enabled_services": {\n      "type": "array",\n      "items": {\n        "type": "string"\n      },\n      "description": "Array of systemd unit names to be enabled"\n    },\n    "disabled_services": {\n      "type": "array",\n      "items": {\n        "type": "string"\n      },\n      "description": "Array of systemd unit names to be enabled"\n    },\n    "masked_services": {\n      "type": "array",\n      "items": {\n        "type": "string"\n      },\n      "description": "Array of systemd unit names to be masked"\n    },\n    "masked_generators": {\n      "type": "array",\n      "items": {\n        "type": "string"\n      },\n      "description": "Array of systemd generators to be masked"\n    },\n    "default_target": {\n      "type": "string",\n      "description": "The default target to boot into"\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"schema-2",children:"Schema 2"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:"{}\n"})})]})}function u(e={}){const{wrapper:s}={...(0,i.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>d,a:()=>r});var t=n(7294);const i={},o=t.createContext(i);function r(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);