"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[3239],{9166:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"developer-guide/projects/osbuild/modules/stages/org.osbuild.chrony","title":"org.osbuild.chrony","description":"\x3c!--","source":"@site/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.chrony.md","sourceDirName":"developer-guide/02-projects/osbuild/modules/stages","slug":"/developer-guide/projects/osbuild/modules/stages/org.osbuild.chrony","permalink":"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.chrony","draft":false,"unlisted":false,"editUrl":"https://github.com/osbuild/osbuild/tree/main/stages/org.osbuild.chrony.meta.json","tags":[],"version":"current","frontMatter":{"custom_edit_url":"https://github.com/osbuild/osbuild/tree/main/stages/org.osbuild.chrony.meta.json"},"sidebar":"developer","previous":{"title":"org.osbuild.chown","permalink":"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.chown"},"next":{"title":"org.osbuild.clevis.luks-bind","permalink":"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.clevis.luks-bind"}}');var o=r(4848),t=r(8453);const i={custom_edit_url:"https://github.com/osbuild/osbuild/tree/main/stages/org.osbuild.chrony.meta.json"},d="org.osbuild.chrony",l={},c=[{value:"Schema 1",id:"schema-1",level:2},{value:"Schema 2",id:"schema-2",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"orgosbuildchrony",children:"org.osbuild.chrony"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Configure chrony to set system time from the network."})}),"\n",(0,o.jsxs)(n.p,{children:["Configures ",(0,o.jsx)(n.code,{children:"chrony"})," by modifying ",(0,o.jsx)(n.code,{children:"/etc/chrony.conf"}),'.\nBefore new values are added to the chrony configuration, all lines starting with\n"server", "pool" or "peer" are removed.\nThe \'timeservers\' option provides a very high-level way of configuring chronyd\nwith specific timeservers. Its value is a list of strings representing the\nhostname or IP address of the timeserver. For each list item, the following\nline will be added to the configuration:\n',(0,o.jsx)(n.code,{children:"server \\<HOSTNAME/IP\\> iburst"}),"\nThe 'servers' option provides a direct mapping to the ",(0,o.jsx)(n.code,{children:"server"})," directive from\nchrony configuration. Its value is a list of dictionaries representing each\ntimeserver which should be added to the configuration. For each list item,\na ",(0,o.jsx)(n.code,{children:"server"})," directive will be added the configuration. Currently supported\nsubset of options which can be specified for each timeserver item:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"'hostname' (REQUIRED)"}),"\n",(0,o.jsx)(n.li,{children:"'minpoll'"}),"\n",(0,o.jsx)(n.li,{children:"'maxpoll'"}),"\n",(0,o.jsx)(n.li,{children:"'iburst' (defaults to true)"}),"\n",(0,o.jsxs)(n.li,{children:["'prefer' (defaults to false)\nThe ",(0,o.jsx)(n.code,{children:"leapsectz"})," option configures chrony behavior related to automatic checking\nof the next occurrence of the leap second, using the provided timezone. Its\nvalue is a string representing a timezone from the system tz database (e.g.\n'right/UTC'). If an empty string is provided, then all occurrences of\n",(0,o.jsx)(n.code,{children:"leapsectz"})," directive are removed from the configuration.\nConstraints:"]}),"\n",(0,o.jsx)(n.li,{children:"Exactly one of 'timeservers' or 'servers' options must be provided."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"schema-1",children:"Schema 1"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "additionalProperties": false,\n  "oneOf": [\n    {\n      "required": [\n        "timeservers"\n      ]\n    },\n    {\n      "required": [\n        "servers"\n      ]\n    }\n  ],\n  "properties": {\n    "timeservers": {\n      "type": "array",\n      "items": {\n        "type": "string"\n      },\n      "description": "Array of NTP server addresses."\n    },\n    "servers": {\n      "type": "array",\n      "items": {\n        "additionalProperties": false,\n        "type": "object",\n        "required": [\n          "hostname"\n        ],\n        "properties": {\n          "hostname": {\n            "type": "string",\n            "description": "Hostname or IP address of a NTP server."\n          },\n          "minpoll": {\n            "type": "integer",\n            "description": "Specifies the minimum interval between requests sent to the server as a power of 2 in seconds.",\n            "minimum": -6,\n            "maximum": 24\n          },\n          "maxpoll": {\n            "type": "integer",\n            "description": "Specifies the maximum interval between requests sent to the server as a power of 2 in seconds.",\n            "minimum": -6,\n            "maximum": 24\n          },\n          "iburst": {\n            "type": "boolean",\n            "default": true,\n            "description": "Configures chronyd behavior related to burst requests on startup."\n          },\n          "prefer": {\n            "type": "boolean",\n            "default": false,\n            "description": "Prefer this source over sources without the prefer option."\n          }\n        }\n      }\n    },\n    "leapsectz": {\n      "type": "string",\n      "description": "Timezone used by chronyd to determine when will the next leap second occur. Empty value will remove the option."\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"schema-2",children:"Schema 2"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:"{}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>d});var s=r(6540);const o={},t=s.createContext(o);function i(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);