"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[3676],{774:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>a});var i=s(5893),t=s(1151);const o={},r="org.osbuild.zipl.inst",d={id:"developer-guide/projects/osbuild/modules/stages/org.osbuild.zipl.inst",title:"org.osbuild.zipl.inst",description:"Install the Z Initial Program Loader (zipl)",source:"@site/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.zipl.inst.md",sourceDirName:"developer-guide/02-projects/osbuild/modules/stages",slug:"/developer-guide/projects/osbuild/modules/stages/org.osbuild.zipl.inst",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.zipl.inst",draft:!1,unlisted:!1,editUrl:"https://github.com/osbuild/saurus/tree/main/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.zipl.inst.md",tags:[],version:"current",frontMatter:{},sidebar:"developer",previous:{title:"org.osbuild.zip",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.zip"},next:{title:"org.osbuild.zipl",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.zipl"}},l={},a=[{value:"Schema 1",id:"schema-1",level:2},{value:"Schema 2",id:"schema-2",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"orgosbuildziplinst",children:"org.osbuild.zipl.inst"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Install the Z Initial Program Loader (zipl)"})}),"\n",(0,i.jsxs)(n.p,{children:["This will install the Z Initial Program Loader for the\nspecified ",(0,i.jsx)(n.code,{children:"kernel"}),". The other required parameter is\nthe ",(0,i.jsx)(n.code,{children:"location"}),", which specifies is the offset of the\npartition containing ",(0,i.jsx)(n.code,{children:"/boot"})," within the device that\nis specified via ",(0,i.jsx)(n.code,{children:"disk"}),". Since the kernel and initrd\nare read, the file system tree needs to be mounted\nand thus the ",(0,i.jsx)(n.code,{children:"root"})," mount point must be given."]}),"\n",(0,i.jsx)(n.h2,{id:"schema-1",children:"Schema 1"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:"{}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"schema-2",children:"Schema 2"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "options": {\n    "additionalProperties": false,\n    "required": [\n      "kernel",\n      "location"\n    ],\n    "properties": {\n      "kernel": {\n        "type": "string"\n      },\n      "location": {\n        "type": "number"\n      },\n      "kernel_opts_append": {\n        "description": "Additional kernel options to add to the discovered options",\n        "type": "array",\n        "items": {\n          "description": "A single kernel command line option",\n          "type": "string"\n        }\n      },\n      "blocksize": {\n        "type": "number",\n        "default": 512\n      }\n    }\n  },\n  "devices": {\n    "type": "object",\n    "additionalProperties": true,\n    "required": [\n      "disk"\n    ],\n    "properties": {\n      "disk": {\n        "type": "object",\n        "additionalProperties": true\n      }\n    }\n  },\n  "mounts": {\n    "type": "array",\n    "minItems": 1\n  }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>d,a:()=>r});var i=s(7294);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);