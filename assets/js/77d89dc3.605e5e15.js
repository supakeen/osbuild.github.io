"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[479],{7243:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=t(5893),r=t(1151);const o={},i="org.osbuild.rpm",a={id:"developer-guide/projects/osbuild/modules/stages/org.osbuild.rpm",title:"org.osbuild.rpm",description:"Verify, and install RPM packages",source:"@site/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.rpm.md",sourceDirName:"developer-guide/02-projects/osbuild/modules/stages",slug:"/developer-guide/projects/osbuild/modules/stages/org.osbuild.rpm",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.rpm",draft:!1,unlisted:!1,editUrl:"https://github.com/osbuild/saurus/tree/main/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.rpm.md",tags:[],version:"current",frontMatter:{},sidebar:"developer",previous:{title:"org.osbuild.rpm.macros",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.rpm.macros"},next:{title:"org.osbuild.rpmkeys.import",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.rpmkeys.import"}},d={},l=[{value:"Schema 1",id:"schema-1",level:2},{value:"Schema 2",id:"schema-2",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"orgosbuildrpm",children:"org.osbuild.rpm"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Verify, and install RPM packages"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"exclude.docs"})," option can be used to tell rpm to not install docs.\n",(0,s.jsx)(n.code,{children:"gpgkeys"})," should be an array of strings containing each GPG key to be used\nto verify the packages. Alternatively, the keys can be imported via files\nlocated in the tree via ",(0,s.jsx)(n.code,{children:"gpgkeys.fromtree"}),". This is done after the packages\nare installed so it is possible to import keys packaged in rpms.\n",(0,s.jsx)(n.code,{children:"packages"})," is an array of objects representing RPMs. Each RPM is identified by\nits checksums. Specifically, the content hash of the rpm, not the checksums\nfound in the rpm header. The ",(0,s.jsx)(n.code,{children:"check_gpg"})," property indicates that the RPM's\nmust be signed by one of the given GPG keys, and that the transaction should\nfail otherwise.\nThis stage will fail if any of the packages can't be found, or if any\nRPM fails signature verification.\nUses the following binaries from the host:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rpmkeys"})," to import keys and to verify signatures for each package"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sh"}),", ",(0,s.jsx)(n.code,{children:"mkdir"}),", ",(0,s.jsx)(n.code,{children:"mount"}),", ",(0,s.jsx)(n.code,{children:"chmod"})," to prepare the target tree for ",(0,s.jsx)(n.code,{children:"rpm"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rpm"})," to install packages into the target tree\nThis stage will return the following metadata via the osbuild API:\npackages: a list of objects representing the installed packages,\nwith information about:\nname, version, release,\nand optionally:\nepoch, arch, sigmd5, sigpgp, siggpg"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"schema-1",children:"Schema 1"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "additionalProperties": false,\n  "properties": {\n    "dbpath": {\n      "desription": "Use the given path as RPM database",\n      "type": "string"\n    },\n    "disable_dracut": {\n      "description": "Prevent dracut from running",\n      "type": "boolean"\n    },\n    "exclude": {\n      "type": "object",\n      "additionalProperties": false,\n      "properties": {\n        "docs": {\n          "type": "boolean",\n          "description": "Do not install documentation.",\n          "default": false\n        }\n      }\n    },\n    "gpgkeys": {\n      "description": "Array of GPG key contents to import",\n      "type": "array",\n      "items": {\n        "type": "string"\n      }\n    },\n    "gpgkeys.fromtree": {\n      "description": "Array of files in the tree with GPG keys to import",\n      "type": "array",\n      "items": {\n        "type": "string"\n      }\n    },\n    "packages": {\n      "description": "Array of RPM content hashes",\n      "type": "array",\n      "items": {\n        "oneOf": [\n          {\n            "type": "string",\n            "description": ".rpm file checksum, prefixed with \'md5:\', \'sha1:\', \'sha256:\', \'sha384:\', or \'sha512:\', indicating the algorithm used."\n          },\n          {\n            "type": "object",\n            "additionalProperties": false,\n            "required": [\n              "checksum"\n            ],\n            "properties": {\n              "checksum": {\n                "type": "string",\n                "description": ".rpm file checksum, prefixed with \'md5:\', \'sha1:\', \'sha256:\', \'sha384:\', or \'sha512:\', indicating the algorithm used."\n              },\n              "check_gpg": {\n                "type": "boolean",\n                "description": "Whether the GPG signatures of the RPM should be verified.",\n                "default": false\n              }\n            }\n          }\n        ]\n      }\n    },\n    "ostree_booted": {\n      "type": "boolean",\n      "description": "Create the \'/run/ostree-booted\' marker"\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"schema-2",children:"Schema 2"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "options": {\n    "type": "object",\n    "additionalProperties": false,\n    "properties": {\n      "dbpath": {\n        "desription": "Use the given path as RPM database",\n        "type": "string"\n      },\n      "gpgkeys": {\n        "description": "Array of GPG key contents to import",\n        "type": "array",\n        "items": {\n          "type": "string"\n        }\n      },\n      "gpgkeys.fromtree": {\n        "description": "Array of files in the tree with GPG keys to import",\n        "type": "array",\n        "items": {\n          "type": "string"\n        }\n      },\n      "disable_dracut": {\n        "description": "Prevent dracut from running",\n        "type": "boolean"\n      },\n      "exclude": {\n        "type": "object",\n        "additionalProperties": false,\n        "properties": {\n          "docs": {\n            "type": "boolean",\n            "description": "Do not install documentation.",\n            "default": false\n          }\n        }\n      },\n      "install_langs": {\n        "description": "Only install certain locales (sets `_install_langs` RPM macro)",\n        "type": "array",\n        "minItems": 1,\n        "uniqueItems": true,\n        "items": {\n          "type": "string"\n        }\n      },\n      "ostree_booted": {\n        "type": "boolean",\n        "description": "Create the \'/run/ostree-booted\' marker"\n      }\n    }\n  },\n  "inputs": {\n    "type": "object",\n    "additionalProperties": false,\n    "required": [\n      "packages"\n    ],\n    "properties": {\n      "packages": {\n        "type": "object",\n        "additionalProperties": true\n      }\n    }\n  }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>i});var s=t(7294);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);