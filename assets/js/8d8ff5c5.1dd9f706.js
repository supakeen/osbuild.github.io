"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[5831],{5218:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>d,toc:()=>a});var t=i(5893),o=i(1151);const s={},r="org.osbuild.grub2.legacy",d={id:"developer-guide/projects/osbuild/modules/stages/org.osbuild.grub2.legacy",title:"org.osbuild.grub2.legacy",description:"Configure GRUB2 bootloader and set boot options (legacy, i.e. non-BLS)",source:"@site/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.grub2.legacy.md",sourceDirName:"developer-guide/02-projects/osbuild/modules/stages",slug:"/developer-guide/projects/osbuild/modules/stages/org.osbuild.grub2.legacy",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.grub2.legacy",draft:!1,unlisted:!1,editUrl:"https://github.com/osbuild/saurus/tree/main/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.grub2.legacy.md",tags:[],version:"current",frontMatter:{},sidebar:"developer",previous:{title:"org.osbuild.grub2.iso",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.grub2.iso"},next:{title:"org.osbuild.grub2",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.grub2"}},l={},a=[{value:"Schema 1",id:"schema-1",level:2},{value:"Schema 2",id:"schema-2",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"orgosbuildgrub2legacy",children:"org.osbuild.grub2.legacy"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Configure GRUB2 bootloader and set boot options (legacy, i.e. non-BLS)"})}),"\n",(0,t.jsxs)(n.p,{children:["This stage creates traditional menu entries for systems that are not\ncapable of using the Booloader Specific (BLS).\nSets the GRUB2 boot/root filesystem to ",(0,t.jsx)(n.code,{children:"rootfs"}),". If a separated boot\npartition is used it can be specified via ",(0,t.jsx)(n.code,{children:"bootfs"}),". The file-systems\ncan be identified either via"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["uuid (",(0,t.jsx)(n.code,{children:'\\{"uuid": "\\<uuid\\>"\\}'}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["label (",(0,t.jsx)(n.code,{children:'\\{"label": "\\<label\\>"\\}'}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["device (",(0,t.jsx)(n.code,{children:'\\{"device": "\\<device\\>"\\}'}),", only for the root file system)\nThe kernel boot argument will be composed of the root file system id\nand additional options specified in ",(0,t.jsx)(n.code,{children:"config.cmdline"}),", if any.\nThis stage will overwrite ",(0,t.jsx)(n.code,{children:"/etc/default/grub"}),", ",(0,t.jsx)(n.code,{children:"/boot/grub2/grubenv"}),";\nleading directories will be created if not present.\nThe stage supports configuring grub for BIOS boot and UEFI systems:\nIf BIOS boot support is requested via ",(0,t.jsx)(n.code,{children:"bios"})," this stage will also\noverwrite ",(0,t.jsx)(n.code,{children:"/boot/grub2/grub.cfg"})," and will copy the GRUB2 files from the\nbuildhost into the target tree:"]}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"/usr/share/grub/unicode.pf2"}),"          -> ",(0,t.jsx)(n.code,{children:"/boot/grub2/fonts/"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"/usr/lib/grub/$platform/*.\\{mod,lst\\}"})," -> ",(0,t.jsx)(n.code,{children:"/boot/grub2/$platform/"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["NOTE: skips ",(0,t.jsx)(n.code,{children:"fdt.lst"}),", which is an empty file\nNB: with bios support enabled, this stage will fail if the buildhost\ndoesn't have ",(0,t.jsx)(n.code,{children:"/usr/lib/grub/$platform/"})," and ",(0,t.jsx)(n.code,{children:"/usr/share/grub/unicode.pf2"}),".\nIf UEFI support is enabled via ",(0,t.jsx)(n.code,{children:'uefi: \\{"vendor": "\\<vendor\\>"\\}'})," this stage will\nalso write the ",(0,t.jsx)(n.code,{children:"grub.cfg"})," to ",(0,t.jsx)(n.code,{children:"boot/efi/EFI/\\<vendor\\>/grub.cfg"}),". EFI binaries\nand accompanying data can be installed from the built root via ",(0,t.jsx)(n.code,{children:"uefi.install"}),".\nBoth UEFI and Legacy can be specified at the same time (hybrid boot)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"schema-1",children:"Schema 1"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "definitions": {\n    "filesystem": {\n      "description": "Description of how to locate a file system",\n      "type": "object",\n      "oneOf": [\n        {\n          "required": [\n            "uuid"\n          ]\n        },\n        {\n          "required": [\n            "label"\n          ]\n        },\n        {\n          "required": [\n            "device"\n          ]\n        }\n      ],\n      "properties": {\n        "device": {\n          "description": "Identify the file system by device node",\n          "type": "string"\n        },\n        "label": {\n          "description": "Identify the file system by label",\n          "type": "string"\n        },\n        "uuid": {\n          "description": "Identify the file system by UUID",\n          "type": "string",\n          "oneOf": [\n            {\n              "pattern": "^[0-9A-Za-z]{8}(-[0-9A-Za-z]{4}){3}-[0-9A-Za-z]{12}$",\n              "examples": [\n                "9c6ae55b-cf88-45b8-84e8-64990759f39d"\n              ]\n            },\n            {\n              "pattern": "^[0-9A-Za-z]{4}-[0-9A-Za-z]{4}$",\n              "examples": [\n                "6699-AFB5"\n              ]\n            }\n          ]\n        }\n      }\n    },\n    "terminal": {\n      "description": "Terminal device",\n      "type": "array",\n      "items": {\n        "type": "string"\n      }\n    }\n  },\n  "additionalProperties": false,\n  "required": [\n    "rootfs",\n    "entries"\n  ],\n  "anyOf": [\n    {\n      "required": [\n        "bios"\n      ]\n    },\n    {\n      "required": [\n        "uefi"\n      ]\n    }\n  ],\n  "properties": {\n    "rootfs": {\n      "$ref": "#/definitions/filesystem"\n    },\n    "bootfs": {\n      "$ref": "#/definitions/filesystem"\n    },\n    "bios": {\n      "description": "Include bios boot support",\n      "type": "object",\n      "required": [\n        "platform"\n      ],\n      "properties": {\n        "platform": {\n          "type": "string",\n          "enum": [\n            "i386-pc",\n            "powerpc-ieee1275"\n          ]\n        }\n      }\n    },\n    "uefi": {\n      "description": "Include UEFI boot support",\n      "type": "object",\n      "required": [\n        "vendor"\n      ],\n      "properties": {\n        "vendor": {\n          "type": "string",\n          "description": "The vendor of the UEFI binaries (this is us)",\n          "examples": [\n            "fedora"\n          ],\n          "pattern": "^(.+)$"\n        },\n        "install": {\n          "description": "Install EFI binaries and data from the build root",\n          "type": "boolean",\n          "default": false\n        }\n      }\n    },\n    "write_defaults": {\n      "description": "Whether to write /etc/defaults/grub",\n      "type": "boolean",\n      "default": true\n    },\n    "entries": {\n      "description": "List of entries to add to the boot menu",\n      "type": "array",\n      "minItems": 1,\n      "items": {\n        "type": "object",\n        "additionalProperties": false,\n        "required": [\n          "id",\n          "product",\n          "kernel"\n        ],\n        "properties": {\n          "default": {\n            "type": "boolean",\n            "description": "Make this entry the default entry"\n          },\n          "id": {\n            "description": "UUID for the entry (grub uses the root fs uuid)",\n            "type": "string"\n          },\n          "product": {\n            "type": "object",\n            "additionalProperties": false,\n            "required": [\n              "name",\n              "version"\n            ],\n            "properties": {\n              "name": {\n                "type": "string"\n              },\n              "nick": {\n                "type": "string"\n              },\n              "version": {\n                "type": "string"\n              }\n            }\n          },\n          "kernel": {\n            "description": "The kernel (EVRA)",\n            "type": "string"\n          }\n        }\n      }\n    },\n    "config": {\n      "description": "Configuration options for grub itself",\n      "type": "object",\n      "additionalProperties": false,\n      "properties": {\n        "cmdline": {\n          "description": "Additional kernel command line options",\n          "type": "string"\n        },\n        "default": {\n          "description": "Default boot entry",\n          "type": "string",\n          "default": "saved"\n        },\n        "disable_recovery": {\n          "type": "boolean",\n          "default": true\n        },\n        "disable_submenu": {\n          "type": "boolean",\n          "default": true\n        },\n        "distributor": {\n          "description": "Name of the distributor",\n          "type": "string"\n        },\n        "terminal": {\n          "$ref": "#/definitions/terminal"\n        },\n        "terminal_input": {\n          "$ref": "#/definitions/terminal"\n        },\n        "terminal_output": {\n          "$ref": "#/definitions/terminal"\n        },\n        "timeout": {\n          "description": "Timeout in seconds",\n          "type": "integer",\n          "minimum": 0,\n          "default": 0\n        },\n        "timeout_style": {\n          "type": "string",\n          "enum": [\n            "hidden",\n            "menu",\n            "countdown"\n          ],\n          "default": "countdown"\n        },\n        "serial": {\n          "description": "The command to configure the serial console",\n          "type": "string"\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"schema-2",children:"Schema 2"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:"{}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>r});var t=i(7294);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);