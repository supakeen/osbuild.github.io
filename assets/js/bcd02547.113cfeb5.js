"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[3175],{7903:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>a,contentTitle:()=>n,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var s=t(5893),o=t(1151);const i={},n="Development workflow \ud83c\udfd7\ufe0f",l={id:"developer-guide/general/workflow",title:"Development workflow \ud83c\udfd7\ufe0f",description:"Commits \ud83d\udc8e",source:"@site/docs/developer-guide/01-general/workflow.md",sourceDirName:"developer-guide/01-general",slug:"/developer-guide/general/workflow",permalink:"/docs/developer-guide/general/workflow",draft:!1,unlisted:!1,editUrl:"https://github.com/osbuild/saurus/tree/main/docs/developer-guide/01-general/workflow.md",tags:[],version:"current",frontMatter:{},sidebar:"developer",previous:{title:"Testing strategy",permalink:"/docs/developer-guide/general/testing-strategy/"},next:{title:"Projects",permalink:"/docs/developer-guide/projects/"}},a={},d=[{value:"Commits \ud83d\udc8e",id:"commits-",level:2},{value:"Preferred commit message format",id:"preferred-commit-message-format",level:3},{value:"Pull requests \ud83c\udf1f",id:"pull-requests-",level:2},{value:"Branches \ud83c\udf33",id:"branches-",level:2}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"development-workflow-\ufe0f",children:"Development workflow \ud83c\udfd7\ufe0f"}),"\n",(0,s.jsx)(r.h2,{id:"commits-",children:"Commits \ud83d\udc8e"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"Commits should be easy to read."}),"\n",(0,s.jsx)(r.li,{children:"The commit message should explain clearly what it's trying to do and why. Refer to the format we prefer below."}),"\n",(0,s.jsx)(r.li,{children:"A Jira issue or - where applicable - a GitHub issue reference should be added to automatically link and potentially close a related issue if it exists."}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"preferred-commit-message-format",children:"Preferred commit message format"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"<module>: Topic of the commit\n\nBody of the commit, describing the changes in more detail.\n"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["The ",(0,s.jsx)(r.code,{children:"<module>"})," should point to the area of the codebase (for instance ",(0,s.jsx)(r.code,{children:"tests"})," or ",(0,s.jsx)(r.code,{children:"tools"}),"). The topic\nshould summarize what the commit is doing."]}),"\n",(0,s.jsx)(r.li,{children:"GitHub truncates the first line if it's longer than 65 characters, which is something to keep in mind as well."}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"pull-requests-",children:"Pull requests \ud83c\udf1f"}),"\n",(0,s.jsxs)(r.p,{children:["We try to follow some best practices around pull requests. Some of them are ",(0,s.jsx)(r.a,{href:"https://github.com/osbuild/pr-best-practices",children:"encoded in a CI pipeline already"}),"."]}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"A pull request should be one or more commits which form a coherent unit, it can be\nrebased/rewritten/force-pushed until it's fit for merging."}),"\n",(0,s.jsx)(r.li,{children:"All changes shall be tested. If new tests are necessary to cover new functionality, it should be part of the pull request."}),"\n",(0,s.jsx)(r.li,{children:"Pull requests shall always be as small as possible, to make them easy and quick to review."}),"\n",(0,s.jsxs)(r.li,{children:["The pull request title shall contain ",(0,s.jsx)(r.a,{href:"https://issues.redhat.com",children:"a reference to the relevant Jira ticket"}),"."]}),"\n",(0,s.jsx)(r.li,{children:"Every pull request shall have a clear summary."}),"\n",(0,s.jsxs)(r.li,{children:["Every pull request shall be eagerly reviewed, ideally within a day after being marked as ready for review. ",(0,s.jsx)(r.a,{href:"https://github.com/osbuild/pr-review-queue",children:"Our internal review queue helps the team with that"}),"."]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"This is how the workflow works:"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"Pull requests should be opened from a developer's own fork to avoid random branches on the origin."}),"\n",(0,s.jsxs)(r.li,{children:["Once a pull request is ready to be merged, it should be merged via the ",(0,s.jsx)(r.code,{children:"Rebase and merge"})," or ",(0,s.jsx)(r.code,{children:"Squash and merge"})," option. This avoids merge commits on the main branch."]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"How a pull request developed, and the iterations it went through, should not be visible in the git history. The end result counts: a certain amount of commits, each one forming a logical unit of changes. Avoid 'fix-up' commits which tweak previous commits in the pull request."}),"\n",(0,s.jsx)(r.h2,{id:"branches-",children:"Branches \ud83c\udf33"}),"\n",(0,s.jsx)(r.p,{children:"Force-pushing to, or rebasing the main branch (or other release branches) is not allowed. Avoid directly pushing (fast-forward) to those branches as well. Commits can always be reverted by opening a new pull request."})]})}function h(e={}){const{wrapper:r}={...(0,o.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},1151:(e,r,t)=>{t.d(r,{Z:()=>l,a:()=>n});var s=t(7294);const o={},i=s.createContext(o);function n(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:n(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);