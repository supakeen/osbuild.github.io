"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[409],{9774:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var s=t(5893),o=t(1151);const i={},r="org.osbuild.crypttab",d={id:"developer-guide/projects/osbuild/modules/stages/org.osbuild.crypttab",title:"org.osbuild.crypttab",description:"Create /etc/crypttab entries for encrypted block devices",source:"@site/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.crypttab.md",sourceDirName:"developer-guide/02-projects/osbuild/modules/stages",slug:"/developer-guide/projects/osbuild/modules/stages/org.osbuild.crypttab",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.crypttab",draft:!1,unlisted:!1,editUrl:"https://github.com/osbuild/saurus/tree/main/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.crypttab.md",tags:[],version:"current",frontMatter:{},sidebar:"developer",previous:{title:"org.osbuild.cron.script",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.cron.script"},next:{title:"org.osbuild.debug-shell",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.debug-shell"}},c={},l=[{value:"Schema 1",id:"schema-1",level:2},{value:"Schema 2",id:"schema-2",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"orgosbuildcrypttab",children:"org.osbuild.crypttab"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Create /etc/crypttab entries for encrypted block devices"})}),"\n",(0,s.jsxs)(n.p,{children:["See crypttab(5) for a detailed description of the format but in brief:\neach item in the list of ",(0,s.jsx)(n.code,{children:"volumes"})," describes an encrypted block device\nand how it should it should be setup. The block device is identified\neither by ",(0,s.jsx)(n.code,{children:"uuid"})," or by ",(0,s.jsx)(n.code,{children:"path"})," (device node path). The volume will be\nnamed as ",(0,s.jsx)(n.code,{children:"volume"}),", i.e. made available as ",(0,s.jsx)(n.code,{children:"/dev/mapper/$volume"}),".\nAdditionally, a keyfile can (optionally) be specified via ",(0,s.jsx)(n.code,{children:"keyfile"}),".\nSpecific device options can be specified via ",(0,s.jsx)(n.code,{children:"options"}),".\nThis stage replaces /etc/crypttab, removing any existing entries."]}),"\n",(0,s.jsx)(n.h2,{id:"schema-1",children:"Schema 1"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "additionalProperties": false,\n  "required": [\n    "volumes"\n  ],\n  "properties": {\n    "volumes": {\n      "type": "array",\n      "description": "array of volume objects",\n      "items": {\n        "type": "object",\n        "oneOf": [\n          {\n            "required": [\n              "uuid",\n              "volume"\n            ]\n          },\n          {\n            "required": [\n              "path",\n              "volume"\n            ]\n          }\n        ],\n        "properties": {\n          "volume": {\n            "description": "volume mountpoint",\n            "type": "string"\n          },\n          "uuid": {\n            "description": "device UUID",\n            "type": "string"\n          },\n          "path": {\n            "description": "device path",\n            "type": "string"\n          },\n          "keyfile": {\n            "description": "",\n            "type": "string",\n            "default": "none"\n          },\n          "options": {\n            "description": "options (comma-separated)",\n            "type": "string",\n            "default": ""\n          }\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"schema-2",children:"Schema 2"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:"{}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>r});var s=t(7294);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);