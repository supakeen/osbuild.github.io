"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[4274],{5318:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>n,metadata:()=>i,toc:()=>l});var t=o(5893),r=o(1151);const n={},d="org.osbuild.ostree.passwd",i={id:"developer-guide/projects/osbuild/modules/stages/org.osbuild.ostree.passwd",title:"org.osbuild.ostree.passwd",description:"Populate buildroot with /etc/passwd and /etc/group from an OSTree checkout",source:"@site/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.ostree.passwd.md",sourceDirName:"developer-guide/02-projects/osbuild/modules/stages",slug:"/developer-guide/projects/osbuild/modules/stages/org.osbuild.ostree.passwd",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.ostree.passwd",draft:!1,unlisted:!1,editUrl:"https://github.com/osbuild/saurus/tree/main/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.ostree.passwd.md",tags:[],version:"current",frontMatter:{},sidebar:"developer",previous:{title:"org.osbuild.ostree.os-init",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.ostree.os-init"},next:{title:"org.osbuild.ostree.post-copy",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.ostree.post-copy"}},a={},l=[{value:"Schema 1",id:"schema-1",level:2},{value:"Schema 2",id:"schema-2",level:2}];function c(e){const s={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"orgosbuildostreepasswd",children:"org.osbuild.ostree.passwd"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Populate buildroot with /etc/passwd and /etc/group from an OSTree checkout"})}),"\n",(0,t.jsx)(s.p,{children:"Using the OSTree checkout provided as in input, copy /usr/etc/passwd and\n/usr/lib/passwd, merge them and store the result into /etc/passwd in the\nbuildroot. Do the same for /etc/group file.\nThe use case for this stage is when one wants to preserve UIDs and GIDs\nwhich might change when the system is build from scratch. Creating these\nfiles before any RPMs (or other packages) are installed will prevent changes\nin UIDs and GIDs."}),"\n",(0,t.jsx)(s.h2,{id:"schema-1",children:"Schema 1"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:"{}\n"})}),"\n",(0,t.jsx)(s.h2,{id:"schema-2",children:"Schema 2"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n  "options": {\n    "additionalProperties": false\n  },\n  "inputs": {\n    "type": "object",\n    "additionalProperties": false,\n    "required": [\n      "commits"\n    ],\n    "properties": {\n      "commits": {\n        "type": "object",\n        "additionalProperties": true\n      }\n    }\n  }\n}\n'})})]})}function u(e={}){const{wrapper:s}={...(0,r.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,s,o)=>{o.d(s,{Z:()=>i,a:()=>d});var t=o(7294);const r={},n=t.createContext(r);function d(e){const s=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(n.Provider,{value:s},e.children)}}}]);