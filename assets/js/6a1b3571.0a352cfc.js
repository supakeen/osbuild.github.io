"use strict";(self.webpackChunksaurus=self.webpackChunksaurus||[]).push([[1391],{2638:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>d,toc:()=>u});var t=s(5893),i=s(1151);const o={},r="org.osbuild.luks2.format",d={id:"developer-guide/projects/osbuild/modules/stages/org.osbuild.luks2.format",title:"org.osbuild.luks2.format",description:"Create an LUKS2 container via cryptsetup.",source:"@site/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.luks2.format.md",sourceDirName:"developer-guide/02-projects/osbuild/modules/stages",slug:"/developer-guide/projects/osbuild/modules/stages/org.osbuild.luks2.format",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.luks2.format",draft:!1,unlisted:!1,editUrl:"https://github.com/osbuild/saurus/tree/main/docs/developer-guide/02-projects/osbuild/modules/stages/org.osbuild.luks2.format.md",tags:[],version:"current",frontMatter:{},sidebar:"developer",previous:{title:"org.osbuild.lorax-script",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.lorax-script"},next:{title:"org.osbuild.luks2.remove-key",permalink:"/docs/developer-guide/projects/osbuild/modules/stages/org.osbuild.luks2.remove-key"}},a={},u=[{value:"Schema 1",id:"schema-1",level:2},{value:"Schema 2",id:"schema-2",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"orgosbuildluks2format",children:"org.osbuild.luks2.format"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["Create an LUKS2 container via ",(0,t.jsx)(n.code,{children:"cryptsetup"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["This stage formats the given ",(0,t.jsx)(n.code,{children:"device"})," to be a Linux Unified Key Setup,\nLUKS version 2, container and set the key to be ",(0,t.jsx)(n.code,{children:"passphrase"}),". The uuid\nof the container must be specified via the coressponding option.\nUse the corresponding ",(0,t.jsx)(n.code,{children:"org.osbuild.luks2"})," device to open the container\nduring build.\nBuildhost commands used: ",(0,t.jsx)(n.code,{children:"cryptsetup"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"schema-1",children:"Schema 1"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:"{}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"schema-2",children:"Schema 2"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "definitions": {\n    "pbkdf2": {\n      "description": "pbkdf2 PBKDF parameters",\n      "type": "object",\n      "additionalProperties": false,\n      "required": [\n        "method",\n        "iterations"\n      ],\n      "properties": {\n        "method": {\n          "enum": [\n            "pbkdf2"\n          ]\n        },\n        "iterations": {\n          "description": "Iterations cost",\n          "type": "integer",\n          "minimum": 1000,\n          "maximum": 4294967295\n        }\n      }\n    },\n    "argon2i_d": {\n      "description": "argon2i and argon2id PBKDF parameters",\n      "type": "object",\n      "additionalProperties": false,\n      "required": [\n        "method",\n        "iterations"\n      ],\n      "properties": {\n        "method": {\n          "enum": [\n            "argon2i",\n            "argon2id"\n          ]\n        },\n        "memory": {\n          "description": "Memory cost in kilobytes",\n          "type": "integer",\n          "minimum": 32,\n          "maximum": 4194304\n        },\n        "iterations": {\n          "description": "Iterations cost",\n          "type": "integer",\n          "minimum": 4,\n          "maximum": 4294967295\n        },\n        "parallelism": {\n          "description": "Parallel cost",\n          "type": "integer",\n          "minimum": 1,\n          "maximum": 4\n        }\n      }\n    }\n  },\n  "devices": {\n    "type": "object",\n    "additionalProperties": true,\n    "required": [\n      "device"\n    ],\n    "properties": {\n      "device": {\n        "type": "object",\n        "additionalProperties": true\n      }\n    }\n  },\n  "options": {\n    "additionalProperties": false,\n    "required": [\n      "passphrase",\n      "uuid",\n      "pbkdf"\n    ],\n    "properties": {\n      "passphrase": {\n        "description": "Passphrase to use",\n        "type": "string"\n      },\n      "uuid": {\n        "description": "UUID for the LUKS device to use",\n        "type": "string"\n      },\n      "cipher": {\n        "description": "Cipher to use",\n        "type": "string"\n      },\n      "pbkdf": {\n        "description": "Password-Based Key Derivation Function parameters",\n        "oneOf": [\n          {\n            "$ref": "#/definitions/pbkdf2"\n          },\n          {\n            "$ref": "#/definitions/argon2i_d"\n          }\n        ]\n      },\n      "label": {\n        "description": "Label to use",\n        "type": "string"\n      },\n      "subsystem": {\n        "description": "Additional label",\n        "type": "string"\n      },\n      "sector-size": {\n        "description": "Sector size to use",\n        "type": "integer"\n      },\n      "integrity": {\n        "enum": [\n          "hmac-sha256"\n        ]\n      }\n    }\n  }\n}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>d,a:()=>r});var t=s(7294);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);